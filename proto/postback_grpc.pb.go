// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: postback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostbackStreamClient is the client API for PostbackStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostbackStreamClient interface {
	Subscribe(ctx context.Context, in *ConsumerData, opts ...grpc.CallOption) (PostbackStream_SubscribeClient, error)
	AckPostback(ctx context.Context, opts ...grpc.CallOption) (PostbackStream_AckPostbackClient, error)
}

type postbackStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewPostbackStreamClient(cc grpc.ClientConnInterface) PostbackStreamClient {
	return &postbackStreamClient{cc}
}

func (c *postbackStreamClient) Subscribe(ctx context.Context, in *ConsumerData, opts ...grpc.CallOption) (PostbackStream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostbackStream_ServiceDesc.Streams[0], "/PostbackStream/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &postbackStreamSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PostbackStream_SubscribeClient interface {
	Recv() (*Postback, error)
	grpc.ClientStream
}

type postbackStreamSubscribeClient struct {
	grpc.ClientStream
}

func (x *postbackStreamSubscribeClient) Recv() (*Postback, error) {
	m := new(Postback)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *postbackStreamClient) AckPostback(ctx context.Context, opts ...grpc.CallOption) (PostbackStream_AckPostbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostbackStream_ServiceDesc.Streams[1], "/PostbackStream/AckPostback", opts...)
	if err != nil {
		return nil, err
	}
	x := &postbackStreamAckPostbackClient{stream}
	return x, nil
}

type PostbackStream_AckPostbackClient interface {
	Send(*AckData) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type postbackStreamAckPostbackClient struct {
	grpc.ClientStream
}

func (x *postbackStreamAckPostbackClient) Send(m *AckData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *postbackStreamAckPostbackClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostbackStreamServer is the server API for PostbackStream service.
// All implementations must embed UnimplementedPostbackStreamServer
// for forward compatibility
type PostbackStreamServer interface {
	Subscribe(*ConsumerData, PostbackStream_SubscribeServer) error
	AckPostback(PostbackStream_AckPostbackServer) error
	mustEmbedUnimplementedPostbackStreamServer()
}

// UnimplementedPostbackStreamServer must be embedded to have forward compatible implementations.
type UnimplementedPostbackStreamServer struct {
}

func (UnimplementedPostbackStreamServer) Subscribe(*ConsumerData, PostbackStream_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPostbackStreamServer) AckPostback(PostbackStream_AckPostbackServer) error {
	return status.Errorf(codes.Unimplemented, "method AckPostback not implemented")
}
func (UnimplementedPostbackStreamServer) mustEmbedUnimplementedPostbackStreamServer() {}

// UnsafePostbackStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostbackStreamServer will
// result in compilation errors.
type UnsafePostbackStreamServer interface {
	mustEmbedUnimplementedPostbackStreamServer()
}

func RegisterPostbackStreamServer(s grpc.ServiceRegistrar, srv PostbackStreamServer) {
	s.RegisterService(&PostbackStream_ServiceDesc, srv)
}

func _PostbackStream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PostbackStreamServer).Subscribe(m, &postbackStreamSubscribeServer{stream})
}

type PostbackStream_SubscribeServer interface {
	Send(*Postback) error
	grpc.ServerStream
}

type postbackStreamSubscribeServer struct {
	grpc.ServerStream
}

func (x *postbackStreamSubscribeServer) Send(m *Postback) error {
	return x.ServerStream.SendMsg(m)
}

func _PostbackStream_AckPostback_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostbackStreamServer).AckPostback(&postbackStreamAckPostbackServer{stream})
}

type PostbackStream_AckPostbackServer interface {
	Send(*Empty) error
	Recv() (*AckData, error)
	grpc.ServerStream
}

type postbackStreamAckPostbackServer struct {
	grpc.ServerStream
}

func (x *postbackStreamAckPostbackServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *postbackStreamAckPostbackServer) Recv() (*AckData, error) {
	m := new(AckData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostbackStream_ServiceDesc is the grpc.ServiceDesc for PostbackStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostbackStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PostbackStream",
	HandlerType: (*PostbackStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PostbackStream_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AckPostback",
			Handler:       _PostbackStream_AckPostback_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "postback.proto",
}
